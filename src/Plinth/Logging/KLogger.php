<?php

namespace Plinth\Logging;

/**
 * Original
 * @author  Kenny Katzgrau <katzgrau@gmail.com>
 * @since   July 26, 2008 - Last update July 1, 2012
 * @link    http://codefury.net
 * @version 0.2.0
 * 
 * Updated
 * @author  Klaas Van Parys
 * @license MIT
 */

/**
 * Class documentation
 */
class KLogger
{
    /**
     * Error severity, from low to high. From BSD syslog RFC, secion 4.1.1
     * @link http://www.faqs.org/rfcs/rfc3164.html
     */
    const EMERG  = 0;  // Emergency: system is unusable
    const ALERT  = 1;  // Alert: action must be taken immediately
    const CRIT   = 2;  // Critical: critical conditions
    const ERR    = 3;  // Error: error conditions
    const WARN   = 4;  // Warning: warning conditions
    const NOTICE = 5;  // Notice: normal but significant condition
    const INFO   = 6;  // Informational: informational messages
    const DEBUG  = 7;  // Debug: debug messages

    //custom logging level
    /**
     * Log nothing at all
     */
    const OFF    = 8;
    /**
     * Alias for CRIT
     * @deprecated
     */
    const FATAL  = 2;

    /**
     * Internal status codes
     */
    const STATUS_LOG_OPEN    = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED  = 3;

    /**
     * We need a default argument value in order to add the ability to easily
     * print out objects etc. But we can't use NULL, 0, FALSE, etc, because those
     * are often the values the developers will test for. So we'll make one up.
     */
    const NO_ARGUMENTS = 'KLogger::NO_ARGUMENTS';

    /**
     * Current status of the log file
     * @var integer
     */
    private $_logStatus = self::STATUS_LOG_CLOSED;

    /**
     * Holds messages generated by the class
     * @var array
     */
    private $_messageQueue = [];

    /**
     * Path to the log file
     * @var string
     */
    private $_logFilePath = null;

    /**
     * Current minimum logging threshold
     * @var integer
     */
    private $_severityThreshold = self::INFO;

    /**
	 * Minimum severity for mailing log messages
	 * @var integer
	 */
	private $_mailingSeverity = self::ERR;

	/**
     * This holds the file handle for this instance's log file
     * @var resource
     */
    private $_fileHandle = null;

    /**
     * Standard messages produced by the class. Can be modified for il8n
     * @var array
     */
    private $_messages = [
        'writefail'   => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail'    => 'The file could not be opened. Check permissions.',
    ];

	/**
	 * Mailing list with addresses 
	 * @var array
	 */
	private $mailingList = [];

    /**
     * Default severity of log messages, if not specified
     * @var integer
     */
    private static $_defaultSeverity = self::DEBUG;

    /**
     * Valid PHP date() format string for log timestamps
     * @var string
     */
    private static $_dateFormat = 'Y-m-d G:i:s';

    /**
     * Octal notation for default permissions of the log file
     * @var integer
     */
    private static $_defaultPermissions = 0777;

	/**
     * Octal notation for default permissions of the log files
     * @var integer
     */
    private static $_defaultFilePermissions = 0666;

    /**
     * Array of KLogger instances, part of Singleton pattern
     * @var array
     */
    private static $instances = [];
	 
    /**
     * Partially implements the Singleton pattern. Each $logDirectory gets one
     * instance.
     *
     * @param string|bool  $logDirectory File path to the logging directory
     * @param integer|bool $severity     One of the pre-defined severity constants
     * @return KLogger
     */
    public static function instance($logDirectory = false, $severity = false)
	{
        if ($severity === false) {
            $severity = self::$_defaultSeverity;
        }
        
        if ($logDirectory === false) {
            if (count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $logDirectory = __DIR__;
            }
        }

        if (in_array($logDirectory, self::$instances)) {
            return self::$instances[$logDirectory];
        }

        self::$instances[$logDirectory] = new self($logDirectory, $severity);

        return self::$instances[$logDirectory];
    }

    /**
     * Class constructor
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return void
     */
    public function __construct($logDirectory, $severity)
	{
        $logDirectory = rtrim($logDirectory, '\\/');

        if ($severity === self::OFF) {
            return;
        }

        $this->_logFilePath = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date('Y-m-d')
            . '.txt';

        $this->_severityThreshold = $severity;
        if (!file_exists($logDirectory)) {
            mkdir($logDirectory, self::$_defaultPermissions, true);
        }

        if (file_exists($this->_logFilePath) && !is_writable($this->_logFilePath)) {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['writefail'];
            return;
        }

        if (($this->_fileHandle = fopen($this->_logFilePath, 'a'))) {
			chmod( $this->_logFilePath, self::$_defaultFilePermissions );
            $this->_logStatus = self::STATUS_LOG_OPEN;
            $this->_messageQueue[] = $this->_messages['opensuccess'];
        } else {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['openfail'];
        }
    }

    /**
     * Class destructor
     */
    public function __destruct()
	{
        if ($this->_fileHandle) {
            fclose($this->_fileHandle);
        }
    }

	/**
	* Change the severity threshold, no arguments will reset the threshold to self::INFO
	*
	* @param integer $severity     One of the pre-defined severity constants 
	*/
	public function changeSeverity($severity = self::INFO)
	{
		$this->_severityThreshold = $severity;
	}

    /**
     * Writes a $line to the log with a severity level of DEBUG
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logDebug($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::DEBUG, $args);
    }

    /**
     * Returns (and removes) the last message from the queue.
     * @return string
     */
    public function getMessage()
	{
        return array_pop($this->_messageQueue);
    }

    /**
     * Returns the entire message queue (leaving it intact)
     * @return array
     */
    public function getMessages()
	{
        return $this->_messageQueue;
    }

    /**
     * Empties the message queue
     * @return void
     */
    public function clearMessages()
	{
        $this->_messageQueue = [];
    }

    /**
     * Sets the date format used by all instances of KLogger
     * 
     * @param string $dateFormat Valid format string for date()
     */
    public static function setDateFormat($dateFormat)
	{
        self::$_dateFormat = $dateFormat;
    }

    /**
     * Writes a $line to the log with a severity level of INFO. Any information
     * can be used here, or it could be used with E_STRICT errors
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logInfo($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::INFO, $args);
    }

    /**
     * Writes a $line to the log with a severity level of NOTICE. Generally
     * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logNotice($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::NOTICE, $args);
    }

    /**
     * Writes a $line to the log with a severity level of WARN. Generally
     * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or 
     * E_COMPILE_WARNING
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logWarn($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::WARN, $args);
    }

    /**
     * Writes a $line to the log with a severity level of ERR. Most likely used
     * with E_RECOVERABLE_ERROR
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logError($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::ERR, $args);
    }

    /**
     * Writes a $line to the log with a severity level of FATAL. Generally
     * corresponds to E_ERROR, E_USER_ERROR, E_CORE_ERROR, or E_COMPILE_ERROR
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     * @deprecated Use logCrit
     */
    public function logFatal($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::FATAL, $args);
    }

    /**
     * Writes a $line to the log with a severity level of ALERT.
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logAlert($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::ALERT, $args);
    }

    /**
     * Writes a $line to the log with a severity level of CRIT.
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logCrit($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::CRIT, $args);
    }

    /**
     * Writes a $line to the log with a severity level of EMERG.
     *
     * @param string $line Information to log
	 * @param array|string $args
     * @return void
     */
    public function logEmerg($line, $args = self::NO_ARGUMENTS)
	{
        $this->log($line, self::EMERG, $args);
    }

    /**
     * Writes a $line to the log with the given severity
     *
     * @param string  $line     Text to add to the log
     * @param integer $severity Severity level of log message (use constants)
	 * @param array|string $args
     */
    public function log($line, $severity, $args = self::NO_ARGUMENTS)
	{
        if ($this->_severityThreshold >= $severity) {
            $status = $this->_getTimeLine($severity);
            
            $line = "$status $line";
            
            if ($args !== self::NO_ARGUMENTS) {
                /* Print the passed object value */
                $line = $line . '; ' . var_export($args, true);
            }
            
            $this->writeFreeFormLine($line . PHP_EOL);
			
			if ($this->_mailingSeverity >= $severity) {
				$this->mailLogging($line,$severity);
			}
        }
    }

    /**
     * Writes a line to the log without prepending a status or timestamp
     *
     * @param string $line Line to write to the log
     * @return void
     */
    public function writeFreeFormLine($line)
	{
        if ($this->_logStatus == self::STATUS_LOG_OPEN
            && $this->_severityThreshold != self::OFF) {
            if (fwrite($this->_fileHandle, $line) === false) {
                $this->_messageQueue[] = $this->_messages['writefail'];
            }
        }
    }
    
	/**
	 * @param string $email Email address
	 * @param string|bool $name (optional) Name of person
	 */
	public function addMailing($email, $name = false)
	{
		$this->mailingList[] = $name === false ? $email : $name . ' <' . $email . '>';
	}

	/**
	 * Mails a log line to the receivers to alert them
     *
     * @param string $line Line to write to the log
	 * @param integer $severity Severity level of log message (use constants)
     * @return void
     */
	public function mailLogging($line, $severity)
	{
		if (count($this->mailingList) > 0) {
		    $To = implode(', ', $this->mailingList);

			$Body			= $line;
			$Subject		= "[LOGGING] Severity: $severity";
			$CustomHeaders	= 'MIME-Version: 1.0' . "\r\n";
			$CustomHeaders	.= 'X-Priority: 1 (Highest)' . "\r\n";
			$CustomHeaders	.= 'X-MSMail-Priority: High' . "\r\n";
			$CustomHeaders	.= 'Importance: High' . "\r\n";
			$CustomHeaders 	.= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
			
			@mail($To, $Subject, $Body, $CustomHeaders);
		}
	}
	
	/**
	 * When the webserver finishes the request or the script crashes on an error, 
	 * this function will fetch the last error and log it.
	 * @param KLogger $self
	 * @return void
	 */
	public static function handleShutdown($self)
	{
		$error		= error_get_last();

		if ($error !== NULL) {
			$errno   	= $error["type"];
			$errfile 	= $error["file"];
			$errline 	= $error["line"];
			$errstr  	= $error["message"];
			
			$logstr = " ($errno):  $errstr in $errfile on line $errline";
			
			switch ($errno) {
				//Full explaination here: http://php.net/manual/en/errorfunc.constants.php
				case E_CORE_ERROR 		: $self->logEmerg( 	"Core fatal error" 		. $logstr); break;
				case E_COMPILE_ERROR 	: $self->logAlert( 	"Compile fatal error" 		. $logstr); break;
				case E_ERROR  			: $self->logCrit( 	"Fatal error" 				. $logstr); break;
				case E_PARSE  			: $self->logCrit( 	"Parse error" 				. $logstr); break;
				case E_USER_ERROR 		: $self->logCrit( 	"User fatal error" 		. $logstr); break;
				case E_RECOVERABLE_ERROR: $self->logCrit( 	"Recoverable fatal error"	. $logstr); break;
				case E_ALL				: $self->logError( 	"Error" 					. $logstr); break;
				case E_WARNING  		: $self->logWarn( 	"Warning" 					. $logstr); break;
				case E_CORE_WARNING 	: $self->logWarn( 	"Core warning" 			. $logstr); break;
				case E_COMPILE_WARNING 	: $self->logWarn(	"Compile warning" 			. $logstr); break;
				case E_USER_WARNING 	: $self->logWarn( 	"User warning" 			. $logstr); break;
				case E_DEPRECATED 		: $self->logWarn( 	"Deprecated" 				. $logstr); break;
				case E_USER_DEPRECATED 	: $self->logWarn( 	"User deprecated" 			. $logstr); break;
				case E_NOTICE 			: $self->logNotice( "Notice" 					. $logstr); break;
				case E_USER_NOTICE		: $self->logNotice( "User notice" 				. $logstr); break;
				case E_STRICT  			: $self->logNotice( "Strict notice" 			. $logstr); break;
				default 				: $self->logError( 	"Unknown error"			. $logstr);
			}
		}
	}

	/**
	 * @param integer $level
	 * @return string
	 */
    private function _getTimeLine($level)
	{
        $time = date(self::$_dateFormat);

        switch ($level) {
            case self::EMERG:
                return "0 $time - EMERG -->";
            case self::ALERT:
                return "1 $time - ALERT -->";
            case self::CRIT:
                return "2 $time - CRIT -->";
            case self::FATAL: # FATAL is an alias of CRIT
                return "2 $time - FATAL -->";
            case self::NOTICE:
                return "5 $time - NOTICE -->";
            case self::INFO:
                return "6 $time - INFO -->";
            case self::WARN:
                return "4 $time - WARN -->";
            case self::DEBUG:
                return "7 $time - DEBUG -->";
            case self::ERR:
                return "3 $time - ERROR -->";
            default:
                return "8 $time - LOG -->";
        }
    }
}